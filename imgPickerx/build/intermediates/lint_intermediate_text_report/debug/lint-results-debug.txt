D:\Android\workspaces\imgPicker\imgPickerx\src\main\java\com\fy\luban\Checker.java:31: Warning: Implicitly using the default locale is a common source of bugs: Use toLowerCase(Locale) instead. For strings meant to be internal use Locale.ROOT, otherwise Locale.getDefault(). [DefaultLocale]
    return format.contains(suffix.toLowerCase());
                                  ~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\java\com\fy\luban\Checker.java:39: Warning: Implicitly using the default locale is a common source of bugs: Use toLowerCase(Locale) instead. For strings meant to be internal use Locale.ROOT, otherwise Locale.getDefault(). [DefaultLocale]
    String suffix = path.substring(path.lastIndexOf("."), path.length()).toLowerCase();
                                                                         ~~~~~~~~~~~

   Explanation for issues of type "DefaultLocale":
   Calling String#toLowerCase() or #toUpperCase() without specifying an
   explicit locale is a common source of bugs. The reason for that is that
   those methods will use the current locale on the user's device, and even
   though the code appears to work correctly when you are developing the app,
   it will fail in some locales. For example, in the Turkish locale, the
   uppercase replacement for i is not I.

   If you want the methods to just perform ASCII replacement, for example to
   convert an enum name, call String#toUpperCase(Locale.US) instead. If you
   really want to use the current locale, call
   String#toUpperCase(Locale.getDefault()) instead.

   https://developer.android.com/reference/java/util/Locale.html#default_locale

D:\Android\workspaces\imgPicker\imgPickerx\src\main\java\com\fy\luban\Engine.java:6: Warning: Avoid using android.media.ExifInterface; use androidx.media.ExifInterface instead [ExifInterface]
import android.media.ExifInterface;
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "ExifInterface":
   The android.media.ExifInterface implementation has some known security bugs
   in older versions of Android. There is a new implementation available of
   this library in the support library, which is preferable.

D:\Android\workspaces\imgPicker\imgPickerx\src\main\java\com\fy\img\picker\folder\ImageDataSource.java:45: Warning: Field requires API level 29 (current min is 21): android.provider.MediaStore.MediaColumns#DURATION [InlinedApi]
            MediaStore.Images.Media.DURATION        //视频、音频的时长，long型  132492
            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "InlinedApi":
   This check scans through all the Android API field references in the
   application and flags certain constants, such as static final integers and
   Strings, which were introduced in later versions. These will actually be
   copied into the class files rather than being referenced, which means that
   the value is available even when running on older devices. In some cases
   that's fine, and in other cases it can result in a runtime crash or
   incorrect behavior. It depends on the context, so consider the code
   carefully and decide whether it's safe and can be suppressed or whether the
   code needs to be guarded.

   If you really want to use this API and don't need to support older devices
   just set the minSdkVersion in your build.gradle or AndroidManifest.xml
   files.

   If your code is deliberately accessing newer APIs, and you have ensured
   (e.g. with conditional execution) that this code will only ever be called
   on a supported platform, then you can annotate your class or method with
   the @TargetApi annotation specifying the local minimum SDK to apply, such
   as @TargetApi(11), such that this check considers 11 rather than your
   manifest file's minimum SDK as the required API level.

D:\Android\workspaces\imgPicker\imgPickerx\src\main\java\com\fy\img\picker\folder\ImageFolderAdapter.java:38: Warning: Avoid passing null as the view root (needed to resolve layout parameters on the inflated layout's root element) [InflateParams]
            itemView = LayoutInflater.from(getContext()).inflate(R.layout.adapter_imgfolder, null);
                                                                                             ~~~~

   Explanation for issues of type "InflateParams":
   When inflating a layout, avoid passing in null as the parent view, since
   otherwise any layout parameters on the root of the inflated layout will be
   ignored.

   https://www.bignerdranch.com/blog/understanding-androids-layoutinflater-inflate/

D:\Android\workspaces\imgPicker\imgPickerx\build.gradle:74: Warning: A newer version of androidx.appcompat:appcompat than 1.6.0 is available: 1.7.0 [GradleDependency]
    implementation "androidx.appcompat:appcompat:1.6.0"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\build.gradle:75: Warning: A newer version of androidx.recyclerview:recyclerview than 1.2.0 is available: 1.3.2 [GradleDependency]
    implementation "androidx.recyclerview:recyclerview:1.2.0"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\build.gradle:76: Warning: A newer version of com.google.android.material:material than 1.2.1 is available: 1.12.0 [GradleDependency]
    implementation "com.google.android.material:material:1.2.1"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\build.gradle:77: Warning: A newer version of androidx.constraintlayout:constraintlayout than 2.0.1 is available: 2.1.4 [GradleDependency]
    implementation "androidx.constraintlayout:constraintlayout:2.0.1"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\build.gradle:78: Warning: A newer version of androidx.lifecycle:lifecycle-viewmodel than 2.2.0 is available: 2.8.5 [GradleDependency]
    implementation "androidx.lifecycle:lifecycle-viewmodel:2.2.0"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\build.gradle:93: Warning: A newer version of com.github.bumptech.glide:glide than 4.11.0 is available: 4.16.0 [GradleDependency]
    implementation 'com.github.bumptech.glide:glide:4.11.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\build.gradle:94: Warning: A newer version of com.github.bumptech.glide:annotations than 4.11.0 is available: 4.16.0 [GradleDependency]
    implementation 'com.github.bumptech.glide:annotations:4.11.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\build.gradle:95: Warning: A newer version of com.github.bumptech.glide:compiler than 4.11.0 is available: 4.16.0 [GradleDependency]
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\build.gradle:100: Warning: A newer version of com.squareup.okhttp3:okhttp than 3.12.0 is available: 3.14.7 [GradleDependency]
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\build.gradle:102: Warning: A newer version of com.google.code.gson:gson than 2.7 is available: 2.10.1 [GradleDependency]
    implementation 'com.google.code.gson:gson:2.7'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

D:\Android\workspaces\imgPicker\imgPickerx\build.gradle:22: Warning: If you plan to use data binding in a Kotlin project, you should apply the kotlin-kapt plugin. [DataBindingWithoutKapt]
        enabled = true
        ~~~~~~~~~~~~~~

   Explanation for issues of type "DataBindingWithoutKapt":
   Apps that use Kotlin and data binding should also apply the kotlin-kapt
   plugin.

   https://kotlinlang.org/docs/reference/kapt.html

D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\layout\adapter_camera.xml:12: Warning: Use app:drawableTopCompat instead of android:drawableTop [UseCompatTextViewDrawableXml from androidx.appcompat]
        android:drawableTop="@mipmap/grid_camera"
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\layout\adapter_image.xml:30: Warning: Use app:drawableLeftCompat instead of android:drawableLeft [UseCompatTextViewDrawableXml from androidx.appcompat]
        android:drawableLeft="@mipmap/video_icon"
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UseCompatTextViewDrawableXml":
   TextView uses android: compound drawable attributes instead of app: ones

   Vendor: Android Open Source Project
   Identifier: androidx.appcompat
   Feedback: https://issuetracker.google.com/issues/new?component=460343

D:\Android\workspaces\imgPicker\imgPickerx\src\main\java\com\fy\img\picker\multiselect\ImgPickersAdapter.java:128: Warning: It will always be more efficient to use more specific change events if you can. Rely on notifyDataSetChanged as a last resort. [NotifyDataSetChanged]
        notifyDataSetChanged();
        ~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "NotifyDataSetChanged":
   The RecyclerView adapter's onNotifyDataSetChanged method does not specify
   what about the data set has changed, forcing any observers to assume that
   all existing items and structure may no longer be valid. `LayoutManager`s
   will be forced to fully rebind and relayout all visible views.

D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\layout\adapter_imgfolder.xml:6: Warning: Possible overdraw: Root element paints background #FFFFFF with a theme that also paints a background (inferred theme is @android:style/Theme.Holo) [Overdraw]
    android:background="#FFFFFF"
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\layout\img_activity_head.xml:8: Warning: Possible overdraw: Root element paints background @color/appHeadBg with a theme that also paints a background (inferred theme is @android:style/Theme.Holo) [Overdraw]
    android:background="@color/appHeadBg">
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "Overdraw":
   If you set a background drawable on a root view, then you should use a
   custom theme where the theme background is null. Otherwise, the theme
   background will be painted first, only to have your custom background
   completely cover it; this is called "overdraw".

   NOTE: This detector relies on figuring out which layouts are associated
   with which activities based on scanning the Java code, and it's currently
   doing that using an inexact pattern matching algorithm. Therefore, it can
   incorrectly conclude which activity the layout is associated with and then
   wrongly complain that a background-theme is hidden.

   If you want your custom background on multiple pages, then you should
   consider making a custom theme with your custom background and just using
   that theme instead of a root element background.

   Of course it's possible that your custom drawable is translucent and you
   want it to be mixed with the background. However, you will get better
   performance if you pre-mix the background with your drawable and use that
   resulting image or color as a custom theme background instead.

D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\values\colors.xml:21: Warning: The resource R.color.titleBarCon appears to be unused [UnusedResources]
    <color name="titleBarCon">#fefefe</color>
           ~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\values\colors.xml:27: Warning: The resource R.color.rce_loading_data appears to be unused [UnusedResources]
    <color name="rce_loading_data">#0099FF</color>
           ~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\values\colors.xml:28: Warning: The resource R.color.rce_loading_data_bk appears to be unused [UnusedResources]
    <color name="rce_loading_data_bk">#EEDEDEDE</color>
           ~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\values\colors.xml:29: Warning: The resource R.color.rce_loading_progress_initial appears to be unused [UnusedResources]
    <color name="rce_loading_progress_initial">#D4F0F7</color>
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\values\colors.xml:30: Warning: The resource R.color.rce_loading_progress_terminal appears to be unused [UnusedResources]
    <color name="rce_loading_progress_terminal">#0099FF</color>
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\values\strings.xml:10: Warning: The resource R.string.select_complete appears to be unused [UnusedResources]
    <string name="select_complete">完成(%1$s/%2$s)</string>
            ~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\values\strings.xml:13: Warning: The resource R.string.photo_crop appears to be unused [UnusedResources]
    <string name="photo_crop">图片裁剪</string>
            ~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\values\strings.xml:14: Warning: The resource R.string.origin appears to be unused [UnusedResources]
    <string name="origin">原图</string>
            ~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\values\strings.xml:15: Warning: The resource R.string.origin_size appears to be unused [UnusedResources]
    <string name="origin_size">原图(%1$s)</string>
            ~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\values\strings.xml:18: Warning: The resource R.string.addFile appears to be unused [UnusedResources]
    <string name="addFile">添加照片</string>
            ~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.

   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests=true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests=true.

D:\Android\workspaces\imgPicker\imgPickerx\build.gradle:78: Information: Add suffix -ktx to enable the Kotlin extensions for this library [KtxExtensionAvailable]
    implementation "androidx.lifecycle:lifecycle-viewmodel:2.2.0"
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "KtxExtensionAvailable":
   Android KTX extensions augment some libraries with support for modern
   Kotlin language features like extension functions, extension properties,
   lambdas, named parameters, coroutines, and more.

   In Kotlin projects, use the KTX version of a library by replacing the
   dependency in your build.gradle file. For example, you can replace
   androidx.fragment:fragment with androidx.fragment:fragment-ktx.

   https://developer.android.com/kotlin/ktx

D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\layout\adapter_image.xml:6: Warning: Missing contentDescription attribute on image [ContentDescription]
    <ImageView
     ~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\layout\adapter_imgfolder.xml:10: Warning: Missing contentDescription attribute on image [ContentDescription]
    <ImageView
     ~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\layout\adapter_imgfolder.xml:45: Warning: Missing contentDescription attribute on image [ContentDescription]
    <ImageView
     ~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\layout\viewpager_preview.xml:17: Warning: Missing contentDescription attribute on image [ContentDescription]
        <ImageView
         ~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\layout\viewpager_preview.xml:23: Warning: Missing contentDescription attribute on image [ContentDescription]
        <ImageView
         ~~~~~~~~~

   Explanation for issues of type "ContentDescription":
   Non-textual widgets like ImageViews and ImageButtons should use the
   contentDescription attribute to specify a textual description of the widget
   such that screen readers and other accessibility tools can adequately
   describe the user interface.

   Note that elements in application screens that are purely decorative and do
   not provide any content or enable a user action should not have
   accessibility content descriptions. In this case, just suppress the lint
   warning with a tools:ignore="ContentDescription" attribute.

   Note that for text fields, you should not set both the hint and the
   contentDescription attributes since the hint will never be shown. Just set
   the hint.

   https://developer.android.com/guide/topics/ui/accessibility/apps#special-cases

D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\layout\adapter_image.xml:27: Warning: Hardcoded string "0:10 s", should use @string resource [HardcodedText]
        android:text="0:10 s"
        ~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "HardcodedText":
   Hardcoding text attributes directly in layout files is bad for several
   reasons:

   * When creating configuration variations (for example for landscape or
   portrait) you have to repeat the actual text (and keep it up to date when
   making changes)

   * The application cannot be translated to other languages by just adding
   new translations for existing string resources.

   There are quickfixes to automatically extract this hardcoded string into a
   resource lookup.

D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\layout\act_img_picker.xml:71: Warning: Consider replacing android:layout_toLeftOf with android:layout_toStartOf="@id/btn_complete" to better support right-to-left layouts [RtlHardcoded]
                android:layout_toLeftOf="@id/btn_complete"
                ~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\layout\adapter_image.xml:17: Warning: Consider replacing android:layout_alignParentRight with android:layout_alignParentEnd="true" to better support right-to-left layouts [RtlHardcoded]
        android:layout_alignParentRight="true"
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\layout\adapter_image.xml:30: Warning: Consider replacing android:drawableLeft with android:drawableStart="@mipmap/video_icon" to better support right-to-left layouts [RtlHardcoded]
        android:drawableLeft="@mipmap/video_icon"
        ~~~~~~~~~~~~~~~~~~~~
D:\Android\workspaces\imgPicker\imgPickerx\src\main\res\layout\adapter_image.xml:34: Warning: Use "end" instead of "right" to ensure correct behavior in right-to-left locales [RtlHardcoded]
        android:gravity="right|center_vertical"
                         ~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "RtlHardcoded":
   Using Gravity#LEFT and Gravity#RIGHT can lead to problems when a layout is
   rendered in locales where text flows from right to left. Use Gravity#START
   and Gravity#END instead. Similarly, in XML gravity and layout_gravity
   attributes, use start rather than left.

   For XML attributes such as paddingLeft and layout_marginLeft, use
   paddingStart and layout_marginStart. NOTE: If your minSdkVersion is less
   than 17, you should add both the older left/right attributes as well as the
   new start/end attributes. On older platforms, where RTL is not supported
   and the start/end attributes are unknown and therefore ignored, you need
   the older left/right attributes. There is a separate lint check which
   catches that type of error.

   (Note: For Gravity#LEFT and Gravity#START, you can use these constants even
   when targeting older platforms, because the start bitmask is a superset of
   the left bitmask. Therefore, you can use gravity="start" rather than
   gravity="left|start".)

0 errors, 41 warnings
